############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))
  CF_STACK: cflinuxfs4

node-image: &node-image
  type: docker-image
  source:
    repository: node
    tag: 18

cf-image: &cf-image
  platform: linux
  image_resource:
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: harden-concourse-task
      aws_region: us-gov-west-1
      tag: ((harden-concourse-task-tag))

test-api: &test-api
  - in_parallel:
    - get: redis
      params: {save: true}
    - get: postgres
      params: {save: true}
    - get: node
      params: {save: true}

  - task: install-deps-api
    config:
      platform: linux
      image_resource:
        <<: *node-image
      inputs: [name: src-api]
      outputs: [name: src-api]
      run:
        dir: src-api
        path: bash
        args: [-c, yarn --pure-lockfile]

  - in_parallel:
    - task: lint-api
      config:
        platform: linux
        image_resource:
          <<: *node-image
        inputs: [name: src-api]
        run:
          dir: src-api
          path: bash
          args: [-c, yarn lint]

    - task: test-api
      privileged: true
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: karlkfi/concourse-dcind
        inputs:
          - name: src-api
          - name: redis
          - name: postgres
          - name: node
        run:
          dir: src-api
          path: ci/docker/entrypoint.sh
          args:
            - bash
            - -ceux
            - |
              docker network prune -f
              docker-compose -f ci/docker/docker-compose.yml run app app/ci/tasks/test-api.sh
              docker-compose -f ci/docker/docker-compose.yml down
              docker volume rm $(docker volume ls -q)
              docker network prune -f

test-admin-client: &test-admin-client
  - task: install-deps-admin-client
    config:
      platform: linux
      image_resource:
        <<: *node-image
      inputs: [name: src-admin-client]
      outputs: [name: src-admin-client]
      run:
        dir:  src-admin-client/admin-client
        path: bash
        args: [-c, yarn --pure-lockfile]

  - task: lint-admin-client
    config:
      platform: linux
      image_resource:
        <<: *node-image
      inputs: [name: src-admin-client]
      run:
        dir: src-admin-client/admin-client
        path: bash
        args: [-c, yarn lint]

  - task: build-admin-client
    config:
      platform: linux
      image_resource:
        <<: *node-image
      inputs: [name: src-admin-client]
      outputs: [name: src-admin-client]
      params:
        API_URL: https://((((deploy-env))-((product))-domain))
        NODE_ENV: production
      run:
        dir: src-admin-client/admin-client
        path: bash
        args: [-c, yarn build]

############################
#  JOBS

jobs:

  - name: test-and-deploy-api-pages-((deploy-env))
    plan:
      - get: src-api
        resource: pr-((deploy-env))
        passed: [set-pipeline]
        trigger: true
      - do: *test-api
      - task: build-api
        config:
          platform: linux
          image_resource:
            <<: *node-image
          inputs: [name: src-api]
          outputs: [name: src-api]
          params:
            APP_HOSTNAME: https://((((deploy-env))-((product))-domain))
            PRODUCT: pages
          run:
            dir: src-api
            path: bash
            args: [-c, yarn build-dev]

      - task: deploy-api
        config:
          <<: *cf-image
          inputs: [name: src-api]
          run:
            path: src-api/ci/tasks/deploy.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-((deploy-env))
          CF_MANIFEST: src-api/.cloudgov/manifest.yml
          CF_VARS_FILE: src-api/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src-api
        on_failure:
          try:
            task: cancel-api-deployment
            config:
              <<: *cf-image
              inputs: [name: src-api]
              run:
                path: src-api/ci/tasks/cancel-deployment.sh
            params:
              <<: *env-cf
              CF_APP_NAME: pages-((deploy-env))

      - task: run-database-migrations
        config:
          <<: *cf-image
          inputs: [name: src-api]
          run:
            path: src-api/ci/tasks/run-task.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-((deploy-env))
          CF_TASK_NAME: run-migrations
          CF_TASK_COMMAND: 'yarn run migrate:up'
        on_failure:
          in_parallel:
            - put: slack
              params:
                text: |
                  :x: FAILED: to migrate database for pages ((deploy-env))
                  <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
                channel: ((slack-channel))
                username: ((slack-username))
                icon_url: ((slack-icon-url))

    on_failure:
      in_parallel:
        - put: slack
          params:
            text: |
              :x: FAILED: api deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed api on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: test-and-deploy-admin-client-pages-((deploy-env))
    plan:
      - get: src-admin-client
        resource: pr-((deploy-env))
        passed: [set-pipeline]
        trigger: true

      - do: *test-admin-client

      - task: configure-nginx
        config:
          <<: *cf-image
          inputs: [name: src-admin-client]
          outputs: [name: src-admin-client]
          run:
            dir: src-admin-client
            path: ci/tasks/configure-admin-client-nginx.sh
        params:
          API_DOMAIN: ((((deploy-env))-((product))-domain))

      - task: deploy-admin-client
        config:
          <<: *cf-image
          inputs: [name: src-admin-client]
          run:
            dir: src-admin-client
            path: ci/tasks/deploy.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-admin-((deploy-env))
          CF_MANIFEST: .cloudgov/manifest.yml
          CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: admin-client
        on_failure:
          try:
            task: cancel-admin-client-deployment
            config:
              <<: *cf-image
              inputs: [name: src-admin-client]
              run:
                dir: src-admin-client
                path: ci/tasks/cancel-deployment.sh
            params:
              <<: *env-cf
              CF_APP_NAME: pages-admin-((deploy-env))

    on_failure:
      in_parallel:
        - put: slack
          params:
            text: |
              :x: FAILED: admin client deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

    on_success:
      in_parallel:
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed admin client on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: deploy-queues-ui-pages-((deploy-env))
    plan:
      - get: src-queues-ui
        resource: pr-((deploy-env))
        passed: [set-pipeline]
        trigger: true
      - task: deploy-queues-ui
        config:
          <<: *cf-image
          inputs: [name: src-queues-ui]
          run:
            path: src-queues-ui/ci/tasks/deploy.sh
        params:
          <<: *env-cf
          CF_APP_NAME: pages-queues-ui-((deploy-env))
          CF_MANIFEST: src-queues-ui/.cloudgov/manifest.yml
          CF_VARS_FILE: src-queues-ui/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src-queues-ui
        on_failure:
          try:
            task: cancel-queues-ui-deployment
            config:
              <<: *cf-image
              inputs: [name: src-queues-ui]
              run:
                path: src-queues-ui/ci/tasks/cancel-deployment.sh
            params:
              <<: *env-cf
              CF_APP_NAME: pages-queues-ui-((deploy-env))
    on_failure:
      in_parallel:
        - put: slack
          params:
            text: |
              :x: FAILED: pages queues UI deployment on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed pages queues UI on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"&vars.git-branch="((git-branch))"&vars.product="((product))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-pages-((deploy-env))
    plan:
      - get: src
        resource: pr-((deploy-env))
        passed: [set-pipeline]
      - get: nightly
        trigger: true
      - in_parallel:
        - task: restage-api
          config:
            inputs: [name: src]
            <<: *cf-image
            run:
              path: src/ci/tasks/restage.sh
          params:
            <<: *env-cf
            CF_APP_NAME: pages-((deploy-env))
        - task: restage-queues-ui
          config:
            inputs: [name: src]
            <<: *cf-image
            run:
              path: src/ci/tasks/restage.sh
          params:
            <<: *env-cf
            CF_APP_NAME: pages-queues-ui-((deploy-env))

  - name: set-pipeline
    plan:
    - get: src
      resource: pr-((deploy-env))
      trigger: true
    - set_pipeline: core
      file: src/ci/pipeline-dev.yml
      instance_vars:
        deploy-env: ((deploy-env))
        git-branch: ((git-branch))
        product: ((product))

############################
#  RESOURCES

resources:

  - name: pr-((deploy-env))
    type: pull-request
    check_every: 1m
    source:
      repository: ((pages-repository-path))
      access_token: ((gh-access-token))
      base_branch: ((git-branch))
      disable_forks: true
      ignore_drafts: false

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: redis
    type: docker-image
    source:
      repository: redis
      tag: 5-alpine

  - name: postgres
    type: docker-image
    source:
      repository: postgres
      tag: 11-alpine

  - name: node
    type: docker-image
    source:
      repository: node
      tag: 18

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

############################
#  RESOURCE TYPES

resource_types:

  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
