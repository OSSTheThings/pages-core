############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))
  CF_STACK: cflinuxfs4

test-api: &test-api
  - in_parallel:
    - get: redis
    - get: postgres
    - get: node

  - task: install-deps-api
    file: src/ci/partials/install-deps-api.yml
    image: node

  - in_parallel:
    - task: lint-api
      file: src/ci/partials/lint-api.yml
      image: node

    - task: test-api
      privileged: true
      file: src/ci/partials/test-api.yml

test-admin-client: &test-admin-client
  - task: install-deps-admin-client
    file: src/ci/partials/install-deps-admin-client.yml
    image: node

  - task: lint-admin-client
    file: src/ci/partials/lint-admin-client.yml
    image: node

  - task: build-admin-client
    file: src/ci/partials/build-admin-client.yml
    image: node
    params:
      API_URL: https://((((deploy-env))-pages-domain))
      NODE_ENV: production

############################
#  JOBS

jobs:

  - name: test-and-deploy-api-pages
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - get: cf-image
      - do: *test-api
      - task: build-api
        file: src/ci/partials/build-api.yml
        image: node
        params:
          APP_HOSTNAME: https://((((deploy-env))-pages-domain))
          PROXY_DOMAIN: sites.((((deploy-env))-pages-domain))
          FEATURE_BUILD_TASKS: 'active'


      - task: deploy-api
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-api-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-((deploy-env))

      - task: get-app-env
        file: src/ci/partials/get-app-env.yml
        image: cf-image
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-((deploy-env))

      - task: run-database-migrations
        file: src/ci/partials/run-database-migrations.yml
        image: node
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
        on_failure:
          put: slack
          params:
            text: |
              :x: FAILED: to migrate database for pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED: api deployment on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: SUCCESS: Successfully deployed api on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: test-and-deploy-admin-client-pages
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - get: node

      - do: *test-admin-client
      - get: cf-image
      - task: configure-nginx
        file: src/ci/partials/configure-nginx.yml
        image: cf-image
        params:
          API_DOMAIN: ((((deploy-env))-pages-domain))

      - task: deploy-admin-client
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-admin-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src/admin-client
        on_failure:
          try:
            task: cancel-admin-client-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-admin-((deploy-env))

    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED: admin client deployment on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: SUCCESS: Successfully deployed admin client on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: deploy-queues-ui-pages
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - get: cf-image
      - task: deploy-queues-ui
        file: src/ci/partials/deploy.yml
        image: cf-image
        params:
          <<: *env-cf
          CF_APP_NAME: pages-queues-ui-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-queues-ui-deployment
            file: src/ci/partials/cancel-deployment.yml
            image: cf-image
            params:
              <<: *env-cf
              CF_APP_NAME: pages-queues-ui-((deploy-env))
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED: pages queues UI deployment on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: SUCCESS: Successfully deployed pages queues UI on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: nightly-tasks-pages
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        params: {depth: 1}
      - get: cf-image
      - get: nightly
        trigger: true
      - in_parallel:
        - task: restage-api
          file: src/ci/partials/restage.yml
          image: cf-image
          params:
            <<: *env-cf
            CF_APP_NAME: pages-((deploy-env))
        # - task: restage-queues-ui
        #   file: src/ci/partials/restage.yml
        #   image: cf-image
        #   params:
        #     <<: *env-cf
        #     CF_APP_NAME: pages-queues-ui-((deploy-env))

  - name: sites-builds-checks
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        params: {depth: 1}
      - get: cf-image
      - get: five-minutes
        trigger: true
      - in_parallel:
        - task: queued-builds-check
          file: src/ci/partials/run-task.yml
          image: cf-image
          params:
            <<: *env-cf
            CF_APP_NAME: pages-((deploy-env))
            CF_TASK_NAME: queued-builds-check
            CF_TASK_COMMAND: yarn queued-builds-check ((support-email))
        on_failure:
          put: slack
          params:
            text: |
              :x: FAILED: sites builds checks on pages ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: audit-dependencies
    plan:
      - get: src
        resource: src-((deploy-env))
        trigger: true
        passed: [set-pipeline]
      - get: node
      - in_parallel:
          - task: audit-app
            file: src/ci/partials/audit.yml
            image: node
            params:
              VULN_THRESHOLD: 8 # errors on critical or high
          - task: audit-admin
            file: src/ci/partials/audit-admin.yml
            image: node
            params:
              VULN_THRESHOLD: 8 # errors on critical or high
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED: dependency audit on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: SUCCESS: Successfully passed dependency audit on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: nightly-site-bucket-key-rotator
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
      - get: nightly
        trigger: true
      - get: node
      - get: cf-image
      - task: install-deps-api
        file: src/ci/partials/install-deps-api.yml
        image: node
      - task: get-app-env
        file: src/ci/partials/get-app-env.yml
        image: cf-image
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-((deploy-env))
      - task: rotate-keys
        file: src/ci/partials/rotate-bucket-keys.yml
        image: node
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-((deploy-env))
        on_failure:
          put: slack
          params:
            text: |
              :x: FAILED: Rotate site bucket keys in ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
        on_success:
          put: slack
          params:
            text: |
              :arrows_counterclockwise: :key: SUCCESS: Rotate site bucket keys in ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: e2e-test
    plan:
      - get: src
        resource: src-((deploy-env))
        trigger: true
        passed:
        - test-and-deploy-api-pages
        - test-and-deploy-admin-client-pages
        - deploy-queues-ui-pages
      - get: cf-image
      - get: node
      - task: get-app-env
        file: src/ci/partials/get-app-env.yml
        image: cf-image
        params:
          <<: *env-cf
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-((deploy-env))
      - task: create-test-users
        file: src/ci/partials/create-test-users.yml
        image: node
        params:
          DOMAIN: ((((deploy-env))-pages-domain))
          APP_ENV: ((deploy-env))
          PRODUCT: pages
      - task: run-e2e-tests
        file: src/ci/partials/e2e-test.yml
        image: node
        params:
          APP_ENV: ((deploy-env))
          APP_HOSTNAME: https://((((deploy-env))-pages-domain))
          PRODUCT: pages
        ensure:
          do:
          - task: remove-test-users
            file: src/ci/partials/remove-test-users.yml
            image: node
            params:
              APP_ENV: ((deploy-env))
              PRODUCT: pages
          - put: s3
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED: pages e2e testing on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: SUCCESS: Successfully passed e2e testing on pages ((deploy-env))
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME?vars.deploy-env="((deploy-env))"|View build details>
        channel: ((slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: set-pipeline
    plan:
    - get: src
      resource: src-((deploy-env))
      params: {depth: 1}
      trigger: true
    - set_pipeline: core
      file: src/ci/pipeline-staging.yml
      instance_vars:
        deploy-env: ((deploy-env))

  - name: update-release-branch
    plan:
    - get: src
      resource: src-((deploy-env))
      trigger: true
    - get: cf-image
    - task: update-release-branch
      image: cf-image
      config:
        platform: linux
        inputs:
          - name: src
        params:
          GH_EMAIL: ((pages-operations-github-user-info.email))
          GH_USERNAME: ((pages-operations-github-user-info.username))
          GH_BOT_GPG_KEY: ((pages-operations-github-user-gpg.private_key))
          GH_BOT_SSH_KEY: ((pages-gpg-operations-github-sshkey.private_key))
          GH_BOT_GPG_TRUST: ((pages-operations-github-user-gpg-trust))
          GH_TOKEN: ((pages-operations-ci-github-token))
        run:
          dir: src
          path: ci/tasks/update-release-branch.sh

############################
#  RESOURCES

resources:

  - name: src-((deploy-env))
    type: git
    icon: github
    source:
      uri: git@github.com:((pages-repository-path))
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      private_key: ((pages-gpg-operations-github-sshkey.private_key))

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: five-minutes
    type: time
    source:
      interval: 5m

  - name: redis
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-redis-v7.2
      aws_region: us-gov-west-1
      tag: latest

  - name: postgres
    type: registry-image
    source:
      repository: postgres
      tag: 15-alpine

  - name: node
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-node-v20
      aws_region: us-gov-west-1
      tag: latest

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: cf-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: general-task
      aws_region: us-gov-west-1
      tag: latest

  - name: s3
    type: s3-resource
    source:
      access_key_id: ((test-results-access-key-id))
      secret_access_key: ((test-results-secret-access-key))
      bucket: ((test-results-bucket))
      region: us-gov-west-1
      change_dir_to: src
      options:
      - "--exclude '*'"
      - "--include 'playwright-report/*'"


############################
#  RESOURCE TYPES

resource_types:

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: s3-resource
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: s3-simple-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: time
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: time-resource
      aws_region: us-gov-west-1
      tag: latest
